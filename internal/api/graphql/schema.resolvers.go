package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/lucianocasa/api/internal/api/graphql/generated"
	"github.com/lucianocasa/api/internal/order"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, customerName string, total float64, createdAt string) (*order.Order, error) {
	o := order.Order{
		CustomerName: customerName,
		Total:        total,
		CreatedAt:    createdAt,
	}
	err := r.Service.CreateOrder(&o)
	if err != nil {
		return nil, err
	}
	return &o, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context) ([]*order.Order, error) {
	orders, err := r.Service.ListOrders()
	if err != nil {
		return nil, err
	}

	result := make([]*order.Order, len(orders))
	for i := range orders {
		result[i] = &orders[i]
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
